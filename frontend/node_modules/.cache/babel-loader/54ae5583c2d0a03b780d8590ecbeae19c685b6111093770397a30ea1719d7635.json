{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Event Details\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, _toDisplayString($data.event.name) + \" Details...\", 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$data","event","name"],"sources":["C:\\Users\\Kya\\Desktop\\123\\frontend\\src\\views\\EventDetails.vue"],"sourcesContent":["<!-- src/views/EventDetails.vue -->\r\n<template>\r\n    <div>\r\n      <h1>Event Details</h1>\r\n      <p>{{ event.name }} Details...</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    props: {\r\n      eventId: {\r\n        type: String,\r\n        required: true\r\n      }\r\n    },\r\n    data() {\r\n  return {\r\n    event: {} // Fetch and populate this data using the eventId\r\n  };\r\n},\r\nmounted() {\r\n  // Access the eventId from route params\r\n  const eventId = this.$route.params.id;\r\n\r\n  // Fetch event details using this.eventId\r\n  fetch(`http://localhost/events/${eventId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.event = data; // Update the event data\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching event details:', error);\r\n    });\r\n}\r\n\r\n  };\r\n  </script>"],"mappings":";gCAGMA,mBAAA,CAAsB,YAAlB,eAAa;;uBADnBC,mBAAA,CAGM,cAFJC,UAAsB,EACtBF,mBAAA,CAAkC,WAAAG,gBAAA,CAA5BC,KAAA,CAAAC,KAAK,CAACC,IAAI,IAAG,aAAW,gB"},"metadata":{},"sourceType":"module","externalDependencies":[]}