{"ast":null,"code":"import AppHeader from './AppHeader.vue';\nexport default {\n  name: 'EventDetails',\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      eventDetails: {},\n      schedule: [],\n      teamInformation: []\n    };\n  },\n  methods: {\n    getMatchType(matchNumber) {\n      switch (matchNumber) {\n        case 1:\n          return \"Prelim\";\n        case 2:\n          return \"Quarters\";\n        case 3:\n          return \"Semi\";\n        case 4:\n          return \"Finals\";\n        default:\n          return \"Unknown\";\n      }\n    },\n    getTeamColor(scheduleItem, team) {\n      const homeScore = scheduleItem.homeTeamPoints;\n      const awayScore = scheduleItem.awayTeamPoints;\n      if (team === 'home') {\n        return homeScore > awayScore ? 'green' : 'red';\n      } else if (team === 'away') {\n        return awayScore > homeScore ? 'green' : 'red';\n      } else {\n        return 'black'; // Default color\n      }\n    }\n  },\n  mounted() {\n    const eventId = this.$route.params.id;\n    if (eventId) {\n      // Fetch event details based on the ID\n      fetch(`http://localhost:8080/events/${eventId}`).then(response => response.json()).then(data => {\n        this.eventDetails = data;\n      });\n\n      // Fetch schedule based on the event ID\n      fetch(`http://localhost:8080/schedule/${eventId}`).then(response => response.json()).then(data => {\n        // Add matchNumber property to each schedule item\n        this.schedule = data.map(scheduleItem => ({\n          ...scheduleItem,\n          matchNumber: scheduleItem.matchNumber\n        }));\n      });\n\n      // Fetch performance based on the event ID\n      fetch(`http://localhost:8080/performance/${eventId}`).then(response => response.json()).then(data => {\n        this.teamInformation = data;\n      });\n    } else {\n      console.error('Event ID is undefined');\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","name","components","data","eventDetails","schedule","teamInformation","methods","getMatchType","matchNumber","getTeamColor","scheduleItem","team","homeScore","homeTeamPoints","awayScore","awayTeamPoints","mounted","eventId","$route","params","id","fetch","then","response","json","map","console","error"],"sources":["C:\\Users\\Kya\\Desktop\\123\\ShotCounter\\frontend\\src\\views\\EventDetails.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <App-header></App-header>\r\n    <h1>{{ eventDetails.eventName }}</h1>\r\n    <p>Start Date: {{ eventDetails.eventStart }}</p>\r\n    <p>End Date: {{ eventDetails.eventEnd }}</p>\r\n    <!-- Display schedule here -->\r\n    <h2>Schedule</h2>\r\n    <ul>\r\n      <li v-for=\"scheduleItem in schedule\" :key=\"scheduleItem.scheduleId\">\r\n        <div class=\"match-details\">\r\n          <!-- Display match type, teams, and points -->\r\n          <span>{{ getMatchType(scheduleItem.matchNumber) }}:</span>\r\n          <div>\r\n            <span class=\"team-name\" :style=\"{ color: getTeamColor(scheduleItem, 'home') }\">\r\n              {{ scheduleItem.homeTeamName }}\r\n            </span>\r\n            <span class=\"score\">{{ scheduleItem.homeTeamPoints }}</span>\r\n            <span class=\"score\">{{ scheduleItem.awayTeamPoints }}</span>\r\n            <span class=\"team-name\" :style=\"{ color: getTeamColor(scheduleItem, 'away') }\">\r\n              {{ scheduleItem.awayTeamName }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    <h2>Team Information</h2>\r\n    <ul>\r\n      <li v-for=\"teamInfo in teamInformation\" :key=\"teamInfo.teamID\">\r\n        {{ teamInfo.teamName }} - Points Won: {{ teamInfo.pointsWon }}, \r\n        Points Lost: {{ teamInfo.pointsLost }}, Point Spread: {{ teamInfo.pointSpread }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AppHeader from './AppHeader.vue';\r\n\r\nexport default {\r\n  name: 'EventDetails',\r\n  components: {\r\n    AppHeader,\r\n  },\r\n  data() {\r\n    return {\r\n      eventDetails: {},\r\n      schedule: [],\r\n      teamInformation:[],\r\n    };\r\n  },\r\n  methods: {\r\n    getMatchType(matchNumber) {\r\n      switch (matchNumber) {\r\n        case 1:\r\n          return \"Prelim\";\r\n        case 2:\r\n          return \"Quarters\";\r\n        case 3:\r\n          return \"Semi\";\r\n        case 4:\r\n          return \"Finals\";\r\n        default:\r\n          return \"Unknown\";\r\n      }\r\n    },\r\n    getTeamColor(scheduleItem, team) {\r\n      const homeScore = scheduleItem.homeTeamPoints;\r\n      const awayScore = scheduleItem.awayTeamPoints;\r\n\r\n      if (team === 'home') {\r\n        return homeScore > awayScore ? 'green' : 'red';\r\n      } else if (team === 'away') {\r\n        return awayScore > homeScore ? 'green' : 'red';\r\n      } else {\r\n        return 'black'; // Default color\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n  const eventId = this.$route.params.id;\r\n\r\n  if (eventId) {\r\n    // Fetch event details based on the ID\r\n    fetch(`http://localhost:8080/events/${eventId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.eventDetails = data;\r\n      });\r\n\r\n    // Fetch schedule based on the event ID\r\n    fetch(`http://localhost:8080/schedule/${eventId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Add matchNumber property to each schedule item\r\n        this.schedule = data.map((scheduleItem) => ({\r\n          ...scheduleItem,\r\n          matchNumber: scheduleItem.matchNumber,\r\n        }));\r\n      });\r\n\r\n    // Fetch performance based on the event ID\r\n    fetch(`http://localhost:8080/performance/${eventId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.teamInformation = data;\r\n      });\r\n  } else {\r\n    console.error('Event ID is undefined');\r\n  }\r\n},\r\n};\r\n</script>\r\n<style>\r\n  ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n\r\n  .match-details {\r\n    flex-wrap: ;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 5px 5px 5px 5px ;\r\n    align-content: space-between !important;\r\n  }\r\n\r\n  .team-name {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n  }\r\n\r\n  .score {\r\n    font-style: italic;\r\n  }\r\n\r\n\r\n  .match-details span {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .match-details .score {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    padding: 5px;\r\n  }\r\n\r\n</style>"],"mappings":"AAqCA,OAAOA,SAAQ,MAAO,iBAAiB;AAEvC,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,CAAC,CAAC;MAChBC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAC;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,WAAW,EAAE;MACxB,QAAQA,WAAW;QACjB,KAAK,CAAC;UACJ,OAAO,QAAQ;QACjB,KAAK,CAAC;UACJ,OAAO,UAAU;QACnB,KAAK,CAAC;UACJ,OAAO,MAAM;QACf,KAAK,CAAC;UACJ,OAAO,QAAQ;QACjB;UACE,OAAO,SAAS;MACpB;IACF,CAAC;IACDC,YAAYA,CAACC,YAAY,EAAEC,IAAI,EAAE;MAC/B,MAAMC,SAAQ,GAAIF,YAAY,CAACG,cAAc;MAC7C,MAAMC,SAAQ,GAAIJ,YAAY,CAACK,cAAc;MAE7C,IAAIJ,IAAG,KAAM,MAAM,EAAE;QACnB,OAAOC,SAAQ,GAAIE,SAAQ,GAAI,OAAM,GAAI,KAAK;MAChD,OAAO,IAAIH,IAAG,KAAM,MAAM,EAAE;QAC1B,OAAOG,SAAQ,GAAIF,SAAQ,GAAI,OAAM,GAAI,KAAK;MAChD,OAAO;QACL,OAAO,OAAO,EAAE;MAClB;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACV,MAAMC,OAAM,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;IAErC,IAAIH,OAAO,EAAE;MACX;MACAI,KAAK,CAAE,gCAA+BJ,OAAQ,EAAC,EAC5CK,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAClCF,IAAI,CAAEpB,IAAI,IAAK;QACd,IAAI,CAACC,YAAW,GAAID,IAAI;MAC1B,CAAC,CAAC;;MAEJ;MACAmB,KAAK,CAAE,kCAAiCJ,OAAQ,EAAC,EAC9CK,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAClCF,IAAI,CAAEpB,IAAI,IAAK;QACd;QACA,IAAI,CAACE,QAAO,GAAIF,IAAI,CAACuB,GAAG,CAAEf,YAAY,KAAM;UAC1C,GAAGA,YAAY;UACfF,WAAW,EAAEE,YAAY,CAACF;QAC5B,CAAC,CAAC,CAAC;MACL,CAAC,CAAC;;MAEJ;MACAa,KAAK,CAAE,qCAAoCJ,OAAQ,EAAC,EACjDK,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAClCF,IAAI,CAAEpB,IAAI,IAAK;QACd,IAAI,CAACG,eAAc,GAAIH,IAAI;MAC7B,CAAC,CAAC;IACN,OAAO;MACLwB,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACxC;EACF;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}